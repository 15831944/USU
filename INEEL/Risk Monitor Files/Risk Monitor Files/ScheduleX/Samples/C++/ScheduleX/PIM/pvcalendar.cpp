// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "pvcalendar.h"

// Dispatch interfaces referenced by this interface
#include "Font.h"
#include "Picture.h"

/////////////////////////////////////////////////////////////////////////////
// CPVCalendar

IMPLEMENT_DYNCREATE(CPVCalendar, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CPVCalendar properties

/////////////////////////////////////////////////////////////////////////////
// CPVCalendar operations

DATE CPVCalendar::GetValue()
{
	DATE result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_DATE, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetValue(DATE newValue)
{
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x1, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

long CPVCalendar::GetBorderStyle()
{
	long result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetBorderStyle(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CPVCalendar::GetAppearance()
{
	short result;
	InvokeHelper(0x3, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetAppearance(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

unsigned long CPVCalendar::GetHeaderBackColor()
{
	unsigned long result;
	InvokeHelper(0x4, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetHeaderBackColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CPVCalendar::GetHeaderForeColor()
{
	unsigned long result;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetHeaderForeColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CPVCalendar::GetDisplayBackColor()
{
	unsigned long result;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetDisplayBackColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CPVCalendar::GetDayBackColor()
{
	unsigned long result;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetDayBackColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CPVCalendar::GetDayForeColor()
{
	unsigned long result;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetDayForeColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CPVCalendar::GetDisplayForeColor()
{
	unsigned long result;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetDisplayForeColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

short CPVCalendar::GetFrame()
{
	short result;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetFrame(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CPVCalendar::GetSelectMode()
{
	short result;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetSelectMode(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

unsigned long CPVCalendar::GetSelectedDayForeColor()
{
	unsigned long result;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetSelectedDayForeColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

unsigned long CPVCalendar::GetSelectedDayBackColor()
{
	unsigned long result;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetSelectedDayBackColor(unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

short CPVCalendar::GetDisplayFormat()
{
	short result;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetDisplayFormat(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CPVCalendar::GetDateOrientation()
{
	short result;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetDateOrientation(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CPVCalendar::GetCustomTextOrientation()
{
	short result;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetCustomTextOrientation(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x12, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

short CPVCalendar::GetFirstDay()
{
	short result;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetFirstDay(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x13, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

long CPVCalendar::GetSelectedDateCount()
{
	long result;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

unsigned long CPVCalendar::GetDOWForeColor(short iDOW)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iDOW);
	return result;
}

void CPVCalendar::SetDOWForeColor(short iDOW, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x15, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iDOW, newValue);
}

unsigned long CPVCalendar::GetDOWBackColor(short iDOW)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iDOW);
	return result;
}

void CPVCalendar::SetDOWBackColor(short iDOW, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x16, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iDOW, newValue);
}

CString CPVCalendar::GetDOWText(short iDOW)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		iDOW);
	return result;
}

void CPVCalendar::SetDOWText(short iDOW, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iDOW, lpszNewValue);
}

CString CPVCalendar::GetMonthText(short iMonth)
{
	CString result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		iMonth);
	return result;
}

void CPVCalendar::SetMonthText(short iMonth, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_BSTR;
	InvokeHelper(0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iMonth, lpszNewValue);
}

unsigned long CPVCalendar::GetDOWTextColor(short iDOW)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x19, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		iDOW);
	return result;
}

void CPVCalendar::SetDOWTextColor(short iDOW, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x19, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iDOW, newValue);
}

void CPVCalendar::GetYearRange(short* nLowerYear, short* nUpperYear)
{
	static BYTE parms[] =
		VTS_PI2 VTS_PI2;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nLowerYear, nUpperYear);
}

void CPVCalendar::SetYearRange(short nLowerYear, short nUpperYear, short nCurrentYear)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 nLowerYear, nUpperYear, nCurrentYear);
}

unsigned long CPVCalendar::GetDATEForeColor(DATE Date)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x1c, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Date);
	return result;
}

void CPVCalendar::SetDATEForeColor(DATE Date, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_I4;
	InvokeHelper(0x1c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

unsigned long CPVCalendar::GetDATEBackColor(DATE Date)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x1d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Date);
	return result;
}

void CPVCalendar::SetDATEBackColor(DATE Date, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_I4;
	InvokeHelper(0x1d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

CString CPVCalendar::GetDATEText(DATE Date)
{
	CString result;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x1e, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		Date);
	return result;
}

void CPVCalendar::SetDATEText(DATE Date, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_BSTR;
	InvokeHelper(0x1e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, lpszNewValue);
}

unsigned long CPVCalendar::GetDayOfYearBackColor(DATE Date)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x1f, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Date);
	return result;
}

void CPVCalendar::SetDayOfYearBackColor(DATE Date, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_I4;
	InvokeHelper(0x1f, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

unsigned long CPVCalendar::GetDayOfYearForeColor(DATE Date)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x20, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Date);
	return result;
}

void CPVCalendar::SetDayOfYearForeColor(DATE Date, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_I4;
	InvokeHelper(0x20, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

CString CPVCalendar::GetDayOfYearText(DATE Date)
{
	CString result;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x21, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		Date);
	return result;
}

void CPVCalendar::SetDayOfYearText(DATE Date, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_BSTR;
	InvokeHelper(0x21, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, lpszNewValue);
}

unsigned long CPVCalendar::GetDayOfMonthBackColor(DATE Date)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x22, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Date);
	return result;
}

void CPVCalendar::SetDayOfMonthBackColor(DATE Date, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_I4;
	InvokeHelper(0x22, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

unsigned long CPVCalendar::GetDayOfMonthForeColor(DATE Date)
{
	unsigned long result;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x23, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Date);
	return result;
}

void CPVCalendar::SetDayOfMonthForeColor(DATE Date, unsigned long newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_I4;
	InvokeHelper(0x23, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

CString CPVCalendar::GetDayOfMonthText(DATE Date)
{
	CString result;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x24, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		Date);
	return result;
}

void CPVCalendar::SetDayOfMonthText(DATE Date, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_BSTR;
	InvokeHelper(0x24, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, lpszNewValue);
}

DATE CPVCalendar::GetNextSelectedDate(DATE Date)
{
	DATE result;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x25, DISPATCH_PROPERTYGET, VT_DATE, (void*)&result, parms,
		Date);
	return result;
}

VARIANT CPVCalendar::GetDataVariant(DATE Date)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x26, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Date);
	return result;
}

void CPVCalendar::SetDataVariant(DATE Date, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_VARIANT;
	InvokeHelper(0x26, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, &newValue);
}

COleFont CPVCalendar::GetHeaderFont()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x27, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return COleFont(pDispatch);
}

void CPVCalendar::SetHeaderFont(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x27, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void CPVCalendar::SetRefHeaderFont(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x27, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 newValue);
}

COleFont CPVCalendar::GetDOWFont()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return COleFont(pDispatch);
}

void CPVCalendar::SetDOWFont(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x28, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void CPVCalendar::SetRefDOWFont(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x28, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 newValue);
}

COleFont CPVCalendar::GetDaysFont()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x29, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return COleFont(pDispatch);
}

void CPVCalendar::SetDaysFont(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x29, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void CPVCalendar::SetRefDaysFont(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x29, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 newValue);
}

COleFont CPVCalendar::GetDATEFont(DATE Date)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x2a, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		Date);
	return COleFont(pDispatch);
}

void CPVCalendar::SetDATEFont(DATE Date, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_DISPATCH;
	InvokeHelper(0x2a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

void CPVCalendar::SetRefDATEFont(DATE Date, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_DISPATCH;
	InvokeHelper(0x2a, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

COleFont CPVCalendar::GetDayOfYearFont(DATE Date)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x2b, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		Date);
	return COleFont(pDispatch);
}

void CPVCalendar::SetDayOfYearFont(DATE Date, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_DISPATCH;
	InvokeHelper(0x2b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

void CPVCalendar::SetRefDayOfYearFont(DATE Date, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_DISPATCH;
	InvokeHelper(0x2b, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

COleFont CPVCalendar::GetDayOfMonthFont(DATE Date)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x2c, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		Date);
	return COleFont(pDispatch);
}

void CPVCalendar::SetDayOfMonthFont(DATE Date, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_DISPATCH;
	InvokeHelper(0x2c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

void CPVCalendar::SetRefDayOfMonthFont(DATE Date, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_DISPATCH;
	InvokeHelper(0x2c, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

CPicture CPVCalendar::GetDATEImage(DATE Date)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x40, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		Date);
	return CPicture(pDispatch);
}

void CPVCalendar::SetDATEImage(DATE Date, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_DISPATCH;
	InvokeHelper(0x40, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

void CPVCalendar::SetRefDATEImage(DATE Date, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_DISPATCH;
	InvokeHelper(0x40, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

CPicture CPVCalendar::GetDayOfMonthImage(DATE Date)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x41, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		Date);
	return CPicture(pDispatch);
}

void CPVCalendar::SetDayOfMonthImage(DATE Date, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_DISPATCH;
	InvokeHelper(0x41, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

void CPVCalendar::SetRefDayOfMonthImage(DATE Date, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_DISPATCH;
	InvokeHelper(0x41, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

CPicture CPVCalendar::GetDayOfYearImage(DATE Date)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x42, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		Date);
	return CPicture(pDispatch);
}

void CPVCalendar::SetDayOfYearImage(DATE Date, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_DISPATCH;
	InvokeHelper(0x42, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

void CPVCalendar::SetRefDayOfYearImage(DATE Date, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_DISPATCH;
	InvokeHelper(0x42, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 Date, newValue);
}

BOOL CPVCalendar::GetRedraw()
{
	BOOL result;
	InvokeHelper(0x43, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetRedraw(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x43, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

void CPVCalendar::AttachDayView(LPDISPATCH DayView)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x44, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 DayView);
}

short CPVCalendar::GetImageOrientation()
{
	short result;
	InvokeHelper(0x45, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetImageOrientation(short nNewValue)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x45, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

CPicture CPVCalendar::GetDOWImage(short iDOW)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x46, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, parms,
		iDOW);
	return CPicture(pDispatch);
}

void CPVCalendar::SetDOWImage(short iDOW, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_DISPATCH;
	InvokeHelper(0x46, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 iDOW, newValue);
}

void CPVCalendar::SetRefDOWImage(short iDOW, LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_DISPATCH;
	InvokeHelper(0x46, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 iDOW, newValue);
}

BOOL CPVCalendar::Load(LPCTSTR FileName, long Options)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x47, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, Options);
	return result;
}

BOOL CPVCalendar::Save(LPCTSTR FileName, long Options)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x48, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, Options);
	return result;
}

VARIANT CPVCalendar::GetVariantValue()
{
	VARIANT result;
	InvokeHelper(0x49, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetVariantValue(const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x49, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &newValue);
}

BOOL CPVCalendar::GetDATESelected(DATE Date)
{
	BOOL result;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x4b, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Date);
	return result;
}

void CPVCalendar::SetDATESelected(DATE Date, BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_DATE VTS_BOOL;
	InvokeHelper(0x4b, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Date, bNewValue);
}

BOOL CPVCalendar::GetMultiLineText()
{
	BOOL result;
	InvokeHelper(0x4c, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetMultiLineText(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x4c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

long CPVCalendar::GetEditMode()
{
	long result;
	InvokeHelper(0x4d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

void CPVCalendar::SetEditMode(long nNewValue)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 nNewValue);
}

COleFont CPVCalendar::GetTextFont()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x4e, DISPATCH_PROPERTYGET, VT_DISPATCH, (void*)&pDispatch, NULL);
	return COleFont(pDispatch);
}

void CPVCalendar::SetTextFont(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 newValue);
}

void CPVCalendar::SetRefTextFont(LPDISPATCH newValue)
{
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x4e, DISPATCH_PROPERTYPUTREF, VT_EMPTY, NULL, parms,
		 newValue);
}
