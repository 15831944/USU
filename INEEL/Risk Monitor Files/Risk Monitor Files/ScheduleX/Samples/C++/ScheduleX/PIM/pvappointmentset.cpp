// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "pvappointmentset.h"

// Dispatch interfaces referenced by this interface
#include "PVAppointment.h"


/////////////////////////////////////////////////////////////////////////////
// CPVAppointmentSet properties

/////////////////////////////////////////////////////////////////////////////
// CPVAppointmentSet operations

long CPVAppointmentSet::GetCount()
{
	long result;
	InvokeHelper(0x1, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, NULL);
	return result;
}

CPVAppointment CPVAppointmentSet::Add(LPCTSTR Description, DATE StartDateTime, DATE EndDateTime)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_BSTR VTS_DATE VTS_DATE;
	InvokeHelper(0x2, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		Description, StartDateTime, EndDateTime);
	return CPVAppointment(pDispatch);
}

CPVAppointment CPVAppointmentSet::Get(DATE Date)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		Date);
	return CPVAppointment(pDispatch);
}

void CPVAppointmentSet::Remove(long Key)
{
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x4, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Key);
}

long CPVAppointmentSet::GetCountAt(DATE Date)
{
	long result;
	static BYTE parms[] =
		VTS_DATE;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		Date);
	return result;
}

CPVAppointment CPVAppointmentSet::GetNext(LPDISPATCH CurrentAppointment)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x6, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		CurrentAppointment);
	return CPVAppointment(pDispatch);
}

CPVAppointment CPVAppointmentSet::GetPrevious(LPDISPATCH CurrentAppointment)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_DISPATCH;
	InvokeHelper(0x7, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		CurrentAppointment);
	return CPVAppointment(pDispatch);
}

CPVAppointment CPVAppointmentSet::GetAppointmentAtPoint(long x, long y)
{
	LPDISPATCH pDispatch;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x8, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, parms,
		x, y);
	return CPVAppointment(pDispatch);
}

CPVAppointment CPVAppointmentSet::GetSelectedAppointment()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0x9, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPVAppointment(pDispatch);
}

void CPVAppointmentSet::Reset()
{
	InvokeHelper(0xa, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CPVAppointment CPVAppointmentSet::GetFirst()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xb, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPVAppointment(pDispatch);
}

CPVAppointment CPVAppointmentSet::GetLast()
{
	LPDISPATCH pDispatch;
	InvokeHelper(0xc, DISPATCH_METHOD, VT_DISPATCH, (void*)&pDispatch, NULL);
	return CPVAppointment(pDispatch);
}

long CPVAppointmentSet::GetCountInRange(DATE StartDate, DATE EndDate)
{
	long result;
	static BYTE parms[] =
		VTS_DATE VTS_DATE;
	InvokeHelper(0xd, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		StartDate, EndDate);
	return result;
}
