//
//
//
// 
// File: BitStrm.h
//
// Type: declarations
//
// This file supplies declaration for the CBitStream class
//
//
// *** WARNING: Read license agreement before including this
//               file in your project.
//
// CBitStream - copyright 1998 - Paolo Brandoli
//                               puntoEXE software
//                               www.puntoexe.com
//
//
//
//
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////

#if !defined(AFX_BITSTREAM_BY_PUNTOEXE__INCLUDED_)
#define AFX_BITSTREAM_BY_PUNTOEXE__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
//
//
//
//
// class CBitStream
//
//
//
//
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
class CBitStream : public CObject
{
	//
	//
	//
	//
	// DIAGNOSTIC
	//
	//
	//
	//
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
public:
	// Validity check. Assert if CBitStream is corrupted
	/////////////////////////////////////////////////////////////////
	virtual void AssertValid( ) const;

	// Dump the state of CBitStream
	/////////////////////////////////////////////////////////////////
#ifdef _DEBUG
	virtual void Dump( CDumpContext& dc ) const;
#endif

	
	//
	//
	//
	//
	// CBitStream COSTRUCTION/DESTRUCTION
	//
	//
	//
	//
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
public:
	// Creates the CBitStream object and optionally attach a CFile
	//  object
	/////////////////////////////////////////////////////////////////
	CBitStream(CFile* pFile=NULL,
		unsigned int bufferSize=4096);

	// Destruct the CBitStream object
	/////////////////////////////////////////////////////////////////
	virtual ~CBitStream();
	

	//
	//
	//
	//
	// I/O FILE ATTACHMENT
	//
	//
	//
	//
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
public:
	// Attach a CFile to this stream.
	// CFile will be used for I/O operations
	/////////////////////////////////////////////////////////////////
	CFile* Attach(CFile* pFile, 
		unsigned int bufferSize=4096); 

	// Detach a CFile from this stream
	/////////////////////////////////////////////////////////////////
	CFile* Detach();


	//
	//
	//
	//
	// READING FUNCTIONS
	//
	//
	//
	//
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
public:
	// Read a block of bits
	/////////////////////////////////////////////////////////////////
	BOOL ReadBits(DWORD* pBuffer, unsigned char bitsToRead);

	// Read a single bit
	/////////////////////////////////////////////////////////////////
	BOOL ReadBit(BOOL* pBit);

	// Add a bit to the specified buffer
	/////////////////////////////////////////////////////////////////
	BOOL AddBit(DWORD* pBuffer);


	//
	//
	//
	//
	// WRITING FUNCTIONS
	//
	//
	//
	//
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
public:
	// Write a block of bits
	/////////////////////////////////////////////////////////////////
	void WriteBits(DWORD* pBuffer, unsigned char bitsToWrite);

	// Write a single bit
	/////////////////////////////////////////////////////////////////
	void WriteBit(BOOL* pBit);


	//
	//
	//
	//
	// I/O BUFFER MANAGEMENT
	//
	//
	//
	//
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
public:
	// Set the internal I/O buffer size
	/////////////////////////////////////////////////////////////////
	void BufferAlloc(unsigned int bufferSize=4096);

	// Return the size of the allocated buffer, in bytes
	/////////////////////////////////////////////////////////////////
	unsigned int GetBufferSize();

	// Discard allocated memory, without flushing buffers.
	// Use this function from within exceptions handlers.
	/////////////////////////////////////////////////////////////////
	void Abort();

    // Return the file position. Calculation adjusted with the
    //  internal buffer values
    /////////////////////////////////////////////////////////////////
    DWORD GetPosition();

    // Set the file position. Calculation adjusted with the
    //  internal buffer values
    /////////////////////////////////////////////////////////////////
    DWORD SetPosition(DWORD position);

protected:
	// Read a block of bytes from the internal buffer
	/////////////////////////////////////////////////////////////////
	unsigned int ReadBuffer(BYTE* pByte, unsigned int bytesToRead=1);

	// Write a block of bytes to the internal buffer
	/////////////////////////////////////////////////////////////////
	void WriteBuffer(BYTE* pByte, unsigned int bytesToWrite=1);
public:
	// Flush all unwritten bits from the buffer to the file
	// This function may be used to byte align data into the file
	/////////////////////////////////////////////////////////////////
	void Flush();

	
	//
	//
	//
	//
	// I/O FUNCTIONS NOT USED BY CBitStream.
	// ALLOW THE APPLICATION TO READ AND WRITE DATA TO THE ATTACHED
	//  DATA SOURCE.
	//
	//
	//
	//
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
public:	
	// Read a block of bytes from the data source, using the buffer
	//  if it is available
	/////////////////////////////////////////////////////////////////
	unsigned int Read(void* pByte, unsigned int bytesToRead);

	// Write a block of bytes to the data source, using the buffer
	//  if it is available
	/////////////////////////////////////////////////////////////////
	void Write(const void* pByte, unsigned int bytesToWrite);

    // Invert high and low order bytes of a DWORD value
    /////////////////////////////////////////////////////////////////
    inline static void InvertWord(WORD* pWord)
        {*pWord=(*pWord>>8) | (*pWord<<8);}

    // Invert byte orders of a DWORD value
    /////////////////////////////////////////////////////////////////
    inline static void InvertDWord(DWORD* pDWord)
        {*pDWord=((*pDWord)>>24) | ((*pDWord & 0x00ff0000)>>8) | ((*pDWord & 0x0000ff00)<<8) | ((*pDWord)<<24);}

	
	//
	//
	//
	//
	// OVERRIDABLES
	//
	//
	//
	//
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////

	//
	//
	// READ AND WRITE A BYTE TO THE CONNECTED DATA SOURCE, USING
	//  THE BUFFER IF IT IS AVAILABLE
	// OVERRIDE IF YOU NEED BYTES PROCESSING (EXTRA BYTES STUFFING,
	//  MARKERS CHECK, ...).
	// FROM OVERRIDEN VERSIONS CALL CBitStream::ReadByte AND
	//  CBitStream::WriteByte TO READ AND WRITE BYTES TO THE DATA
	//  SOURCE.
	//
	//
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
protected:
	// Read a block of bytes from the data source, using the
	//  internal buffer if it is available
	/////////////////////////////////////////////////////////////////
	virtual BOOL ReadByte(BYTE* pByte);
	
	// Write a block of bytes to the data source, using the
	//  internal buffer if it is available
	/////////////////////////////////////////////////////////////////
	virtual void WriteByte(BYTE* pByte);

	
	//
	//
	// DATA SOURCE DEPENDANT FUNCTIONS.
	// READ AND WRITE BLOCK OF BYTES TO THE CONNECTED DATA SOURCE.
	// USED BY THE CBitStream BUFFER MANAGER TO MOVE BYTES BETWEEN
	//  THE BUFFER AND THE DATA SOURCE.
	// OVERRIDE IF THE DATA SOURCE IS NOT A	CFile DERIVED OBJECT.
	//
	//
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
protected:
	// Read a block of bytes directly from the data source, without
	//  using any buffer
	/////////////////////////////////////////////////////////////////
	virtual unsigned int ReadFile(BYTE* pByte, unsigned int bytesToRead=1);

	// Write a block of bytes directly to the data source, without
	//  using any buffer
	/////////////////////////////////////////////////////////////////
	virtual void WriteFile(BYTE* pByte, unsigned int bytesToWrite=1);

	// Move the file position forward or back by the number of bytes 
	//  in the bytesCounter parameter. Used by Flush().
	/////////////////////////////////////////////////////////////////
	virtual DWORD SeekFile(int position, UINT startFrom);


	//
	//
	//
	//
	// ATTRIBUTES
	//
	//
	//
	//
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////
protected:
	// Attached file
	/////////////////////////////////////////////////////////////////
	CFile* m_pFile;

	// Input buffer (bits)
	/////////////////////////////////////////////////////////////////
	BYTE m_inBitsBuffer;           // Bits buffer
	unsigned char m_inBits;        // Number of bits into the buffer

	// Output buffer (bits)
	/////////////////////////////////////////////////////////////////
	BYTE m_outBitsBuffer;          // Bits buffer
	unsigned char m_outBits;       // Number of bits into the buffer

	// Bytes I/O buffer
	/////////////////////////////////////////////////////////////////
	BYTE* m_pBuffer;               // Pointer to the allocated memory
	unsigned int m_bufferMaxSize;  // Size of the allocated memory block
	unsigned int m_bufferSize;     // Number of bytes stored in the buffer
	unsigned int m_bufferBytePntr; // Next byte to return from the buffer
	BOOL m_isWriting;              // Data direction (TRUE=from buffer to data source)
};

#endif // !defined(AFX_BITSTREAM_BY_PUNTOEXE__INCLUDED_)


// BitStrm.h End Of File
/////////////////////////////////////////////////////////////////

