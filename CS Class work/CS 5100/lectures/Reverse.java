/*
	This simple extension of the java.awt.Frame class
	contains all the elements necessary to act as the
	main window of an application.
 */

import java.awt.*;
import java.awt.event.*;
public class Reverse extends Frame
{
	public Reverse()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		
		//{{INIT_CONTROLS
		setLayout(null);
		setVisible(false);
		setSize(400,400);
		setTitle("Lecture 09");
		//}}
		
		//{{INIT_MENUS
		//}}
		
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymMouse aSymMouse = new SymMouse();
		this.addMouseListener(aSymMouse);
		SymKey aSymKey = new SymKey();
		this.addKeyListener(aSymKey);
		//}}
	}
	
	public Reverse(String title)
	{
		this();
		setTitle(title);
	}
	
    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}	
		super.setVisible(b);
	}
	
	static public void main(String args[])
	{
		(new Reverse()).setVisible(true);
	}
	
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension d = getSize();
		
		super.addNotify();
	
		if (fComponentsAdjusted)
			return;
	
		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}
	
	// Used for addNotify check.
	boolean fComponentsAdjusted = false;
	
	//{{DECLARE_CONTROLS
	//}}
	
	//{{DECLARE_MENUS
	//}}
	
	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == Reverse.this)
				Frame1_WindowClosing(event);
		}
	}
	
	void Frame1_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);	// hide the Frame
		dispose();			// free the system resources
		System.exit(0);		// close the application
	}
	
	class SymMouse extends java.awt.event.MouseAdapter
	{
		public void mousePressed(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();
			if (object == Reverse.this)
				Lecture09_MousePressed(event);
		}

		public void mouseReleased(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();
			if (object == Reverse.this)
				Lecture09_MouseReleased(event);
		}
	}

Color circle = new Color(0xBB0000);
Color outside = new Color(0x00BBBB);
boolean mouseDown = false;

public void paint(Graphics g)
{
    if (mouseDown)
     {
        g.setColor(circle);
        g.fillRect(0,0,400,400);
        g.setColor(outside);
        g.fillOval(100,100,200,200);
        g.setColor(Color.black);
        g.drawString(circle.toString(), 30, 50);
        g.drawString(outside.toString(), 115, 170);
     }
     else
     {
        g.setColor(outside);
        g.fillRect(0,0,400,400);
        g.setColor(circle);
        g.fillOval(100,100,200,200);
        g.setColor(Color.black);
        g.drawString(outside.toString(), 30, 50);
        g.drawString(circle.toString(), 115, 170);
     }
}

public void update(Graphics g) { paint(g); }
        
	void Lecture09_MouseReleased(java.awt.event.MouseEvent event)
	{
		// to do: code goes here.
		mouseDown = false;	 
		//{{CONNECTION
		// Repaint the Frame
		repaint();
		//}}
	}

	void Lecture09_MousePressed(java.awt.event.MouseEvent event)
	{
		// to do: code goes here.
		mouseDown = true;	 
		//{{CONNECTION
		// Repaint the Frame
		repaint();
		//}}
	}

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if (object == Reverse.this)
				Lecture09_KeyPressed(event);
		}
	}

	void Lecture09_KeyPressed(java.awt.event.KeyEvent event)
	{
		// to do: code goes here.
		switch (event.getKeyCode())
	    {
		    case KeyEvent.VK_LEFT:  circle = circle.darker(); 
		                            outside = outside.darker(); 
		                            break;
		    case KeyEvent.VK_RIGHT: circle = circle.brighter(); 
		                            outside = outside.brighter(); 
		                            break;
		}
		//{{CONNECTION
		// Repaint the Frame
		repaint();
		//}}
	}
}

