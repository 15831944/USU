/*
	This simple extension of the java.awt.Frame class
	contains all the elements necessary to act as the
	main window of an application.
 */

import java.awt.*;

public class MovingSquare extends Frame
{
	public MovingSquare()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		
		//{{INIT_CONTROLS
		setLayout(null);
		setSize(405,405);
		setVisible(false);
		instructions.setText("Click on the square, and it will move.  Click again, and it will change direction.");
		instructions.setAlignment(java.awt.Label.CENTER);
		add(instructions);
		instructions.setFont(new Font("Serif", Font.PLAIN, 11));
		instructions.setBounds(1,1,401,25);
		add(button);
		button.setBackground(java.awt.Color.yellow);
		button.setBounds(10,35,40,40);
		setTitle("Example 1");
		//}}
		
		//{{INIT_MENUS
		menu3.setLabel("Help");
		menu3.add(aboutMenuItem);
		aboutMenuItem.setLabel("About...");
		mainMenuBar.add(menu3);
		//$$ mainMenuBar.move(0,312);
		setMenuBar(mainMenuBar);
		//}}
		
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		aboutMenuItem.addActionListener(lSymAction);
		button.addActionListener(lSymAction);
		//}}
	}
	
	public MovingSquare(String title)
	{
		this();
		setTitle(title);
	}
	
    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}	
		super.setVisible(b);
	}
	
	static public void main(String args[])
	{
		try
		{
			//Create a new instance of our application's frame, and make it visible.
    		(new MovingSquare()).setVisible(true);
		}
		catch (Throwable t)
		{
			System.err.println(t);
			t.printStackTrace();
			//Ensure the application exits with an error condition.
			System.exit(1);
		}
	}
	
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension d = getSize();
		
		super.addNotify();
	
		if (fComponentsAdjusted)
			return;
	
		// Adjust components according to the insets
		setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(getInsets().left, getInsets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}
	
	// Used for addNotify check.
	boolean fComponentsAdjusted = false;
	
	//{{DECLARE_CONTROLS
	java.awt.Label instructions = new java.awt.Label();
	java.awt.Button button = new java.awt.Button();
	//}}
	
	//{{DECLARE_MENUS
	java.awt.MenuBar mainMenuBar = new java.awt.MenuBar();
	java.awt.Menu menu3 = new java.awt.Menu();
	java.awt.MenuItem aboutMenuItem = new java.awt.MenuItem();
	//}}
	
	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == MovingSquare.this)
				MovingSquare_WindowClosing(event);
		}
	}
	
	void MovingSquare_WindowClosing(java.awt.event.WindowEvent event)
	{
	    setVisible(false);
	    dispose();
		System.exit(0);
		
	}

	
	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == aboutMenuItem)
				aboutMenuItem_ActionPerformed(event);
			else if (object == button)
				button_ActionPerformed(event);
			
		}
	}


	void aboutMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		aboutMenuItem_ActionPerformed_Interaction1(event);
	}


	void aboutMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// AboutDialog Create and show as modal
			(new AboutDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}


	void button_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		button_ActionPerformed_Interaction1(event);
	}

	void button_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// button Set the background color
			Color c = button.getBackground();
			if (c == Color.yellow) button.setBackground(Color.black);
			else if (c == Color.black) button.setBackground(Color.red);
			else if (c == Color.red) button.setBackground(Color.cyan);
			else if (c == Color.cyan) button.setBackground(Color.yellow);
			for (int i = 0; i < 15; i++)
			{
			    Point p = button.getLocation();
			    if (c == Color.yellow) p.x = p.x + 20;
			    else if (c == Color.black) p.y = p.y + 20;
			    else if (c == Color.red) p.x = p.x - 20;
			    else if (c == Color.cyan) p.y = p.y - 20;
			    button.setLocation(p);
			    button.repaint();
			    Thread.currentThread().sleep(20);
			}
		} catch (java.lang.Exception e) {
		}
	}
}

